{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.service.ts","webpack:///src/app/board-user/board-user.component.ts","webpack:///src/app/board-user/board-user.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/rows/rows.component.ts","webpack:///src/app/rows/rows.component.html","webpack:///src/app/utils/validation.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","TOKEN_HEADER_KEY","AuthInterceptor","token","next","authReq","getToken","clone","headers","set","console","log","handle","authInterceptorProviders","provide","useClass","multi","AUTH_API","httpOptions","AuthService","http","username","password","post","email","providedIn","TOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","removeItem","setItem","getItem","user","JSON","stringify","parse","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","useHash","imports","AppComponent","tokenStorageService","router","roles","isLoggedIn","showAdminBoard","showModeratorBoard","getUser","includes","setTimeout","navigate","signOut","location","reload","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AppService","rootURL","rows","columns","params","append","get","BoardUserComponent","appService","title","matrixForm","numRows","nullValidator","required","numColumns","arrayNumbers","arrayCount","destroy$","calculateMatrix","value","pipe","subscribe","numbers","arrayFromObject","Object","map","key","forEach","data","length","unsubscribe","onSubmit","HomeComponent","setTypedText","stringsText","options","strings","typeSpeed","backSpeed","showCursor","cursorChar","loop","typed","reset","LoginComponent","formBuilder","authService","tokenStorage","submitted","isLoginFailed","errorMessage","form","group","minLength","maxLength","login","saveToken","accessToken","saveUser","reloadPage","err","error","message","controls","RegisterComponent","isSuccessful","isSignUpFailed","confirmPassword","validators","match","register","onReset","RowsComponent","Validation","controlName","checkControlName","control","checkControl","errors","matching","setErrors","environment","production","bootstrapModule","catch"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { HTTP_INTERCEPTORS, HttpEvent } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\nimport { Observable } from 'rxjs';\r\nconst TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private token: TokenStorageService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        let authReq = req;\r\n        const token = this.token.getToken();\r\n        if (token != null) {\r\n            authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n            console.log(\"authReq Bearer \" + token);\r\n        }\r\n        return next.handle(authReq);\r\n    }\r\n\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nconst AUTH_API = '/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username,\n      password\n    }, httpOptions);\n  }\n\n  register(username: string, email: string, password: string): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      username,\n      email,\n      password\n    }, httpOptions);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  constructor() { }\n\n  signOut(): void {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string): void {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string | null {\n    return window.sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  public saveUser(user: any): void {\n    window.sessionStorage.removeItem(USER_KEY);\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser(): any {\n    const user = window.sessionStorage.getItem(USER_KEY);\n    if (user) {\n      return JSON.parse(user);\n    }\n    return {};\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'user', component: BoardUserComponent },\r\n  { path: '', redirectTo: 'home', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TokenStorageService } from './_services/token-storage.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n  private roles: string[] = [];\r\n  isLoggedIn = false;\r\n  showAdminBoard = false;\r\n  showModeratorBoard = false;\r\n  username?: string;\r\n\r\n  constructor(private tokenStorageService: TokenStorageService,\r\n              private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\r\n    console.log(\"logged in:\" + this.isLoggedIn);\r\n    if (this.isLoggedIn) {\r\n      const user = this.tokenStorageService.getUser();\r\n      this.roles = user.roles;\r\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\r\n      this.username = user.username;\r\n      setTimeout(() => {\r\n        this.router.navigate(['/user']);\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  logout(): void {\r\n    this.tokenStorageService.signOut();\r\n    window.location.reload();\r\n  }\r\n\r\n}\r\n","<div id=\"app\">\r\n\t<nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n\t\t<a href=\"#\" style=\"pointer-events: none; cursor: default\" class=\"navbar-brand\">Fibonacci Spiral Matrix</a>\r\n\t\t<ul class=\"navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n\t\t\t<li class=\"nav-item\" *ngIf=\"!isLoggedIn\">\r\n\t\t\t\t<a href=\"/home\" class=\"nav-link\" routerLink=\"home\">Home </a>\r\n\t\t\t</li>\r\n\t\t\t<li class=\"nav-item\" *ngIf=\"showAdminBoard\">\r\n\t\t\t\t<a href=\"/admin\" class=\"nav-link\" routerLink=\"admin\">Admin Board</a>\r\n\t\t\t</li>\r\n\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t<a href=\"/user\" class=\"nav-link\" *ngIf=\"isLoggedIn\" routerLink=\"user\">User</a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<ul class=\"navbar-nav ml-auto\" *ngIf=\"!isLoggedIn\">\r\n\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t<a href=\"/register\" class=\"nav-link\" routerLink=\"register\">Sign Up</a>\r\n\t\t\t</li>\r\n\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t<a href=\"/login\" class=\"nav-link\" routerLink=\"login\">Login</a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<ul class=\"navbar-nav ml-auto\" *ngIf=\"isLoggedIn\">\r\n\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t<a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</nav>\r\n\t<div class=\"container\">\r\n\t\t<router-outlet></router-outlet>\r\n\t</div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RowsComponent } from './rows/rows.component';\r\nimport { environment } from '../environments/environment';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BoardUserComponent } from './board-user/board-user.component';\r\nimport { authInterceptorProviders } from './_helpers/auth.interceptor';\r\n\r\n// state related imports\r\n// import { StoreModule } from '@ngrx/store';\r\n// import { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n// import { reducers, metaReducers } from './app-state/reducers';\r\n// import { CustomRouterStateSerializer } from './app-state/shared/utils';\r\n// import { StoreRouterConnectingModule, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RowsComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    HomeComponent,\r\n    BoardUserComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    /**\r\n     * StoreModule.forRoot is imported once in the root module, accepting a reducer\r\n     * function or object map of reducer functions. If passed an object of\r\n     * reducers, combineReducers will be run creating your application\r\n     * meta-reducer. This returns all providers for an @ngrx/store\r\n     * based application.\r\n\r\n    StoreModule.forRoot(reducers, { metaReducers }),\r\n\r\n    /**\r\n     * @ngrx/router-store keeps router state up-to-date in the store.\r\n\r\n    StoreRouterConnectingModule,\r\n\r\n    /**\r\n     * Store devtools instrument the store retaining past versions of state\r\n     * and recalculating new states. This enables powerful time-travel\r\n     * debugging.\r\n     *\r\n     * To use the debugger, install the Redux Devtools extension for either\r\n     * Chrome or Firefox\r\n     *\r\n     * See: https://github.com/zalmoxisus/redux-devtools-extension\r\n\r\n     !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n\r\n    /**\r\n     * EffectsModule.forRoot() is imported once in the root module and\r\n     * sets up the effects class to be initialized immediately when the\r\n     * application starts.\r\n     *\r\n     * See: https://github.com/ngrx/platform/blob/master/docs/effects/api.md#forroot\r\n     */\r\n  ],\r\n  providers: [authInterceptorProviders, {provide: LocationStrategy, useClass: HashLocationStrategy}],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  rootURL = '/spiral';\r\n\r\n  calculateMatrix(rows: string, columns: string) {\r\n      const params = new HttpParams().append('rows', rows).append('cols', columns);\r\n      return this.http.get(this.rootURL, {params});\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {AppService} from \"../app.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})\nexport class BoardUserComponent implements OnInit {\n  content?: string;\n\n  constructor(private appService: AppService) { }\n\n  ngOnInit(): void {\n  }\n\n    title = 'Fibonacci Spiral';\n\n    matrixForm = new FormGroup({\n        numRows: new FormControl('', Validators.nullValidator && Validators.required),\n        numColumns: new FormControl('', Validators.nullValidator && Validators.required),\n    });\n\n    arrayNumbers: any[] = [];\n    arrayCount = 0;\n\n    destroy$: Subject<boolean> = new Subject<boolean>();\n\n    onSubmit() {\n        this.appService.calculateMatrix(this.matrixForm.value.numRows, this.matrixForm.value.numColumns).pipe(takeUntil(this.destroy$)).subscribe((numbers: any[]) => {\n            let arrayFromObject : any;\n            arrayFromObject = Object.keys(numbers).map(key => numbers[key])\n            arrayFromObject.forEach(function(data){\n                numbers = data\n            });\n            this.arrayCount = numbers.length;\n            this.arrayNumbers = numbers;\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n    }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12 mrgnbtm\">\n            <h1 style=\"font-weight: bold\">Fibonacci Spiral</h1>\n            <h6 style=\"margin-top: 20px\">Matrix Properties</h6>\n            <form [formGroup]=\"matrixForm\" (ngSubmit)=\"onSubmit()\">\n                <table class=\"form-Table\">\n                    <tbody>\n                    <tr mdbTableCol>\n                        <td class=\"labelTd\" id=\"initalTd\" >\n                            <label style=\"padding-top: 8px;\">Numbers of Rows</label>\n                        </td>\n                        <td style=\"padding: 0px\">\n                            <input type=\"number\" class=\"form-control\" formControlName=\"numRows\" id=\"rowsInput\" placeholder=\"Number of Rows\">\n                        </td>\n                        <td class=\"labelTd\">\n                            <label style=\"padding-top: 8px;\">Numbers of Columns</label>\n                        </td>\n                        <td style=\"padding: 0px\">\n                            <input type=\"number\" class=\"form-control\" formControlName=\"numColumns\" id=\"columnsInput\" placeholder=\"Number of Columns\">\n                        </td>\n                        <td style=\"padding-left: 0px; border-radius: unset;\">\n                            <button type=\"submit\" id=\"buttonCalculate\" [disabled]=\"!matrixForm.valid\" class=\"btn btn-secondary\">Calculate</button>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n                <br>\n                <app-rows *ngIf=\"arrayNumbers.length !== 0\" [rows]=\"arrayNumbers\"></app-rows>\n            </form>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport Typed from 'typed.js';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\n\nexport class HomeComponent implements OnInit {\n  content?: string;\n  typed: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.setTypedText();\n  }\n\n    setTypedText() {\n\n        let stringsText = [];\n\n        stringsText = ['Welcome to Fibonacci Spiral Matrix', 'Discover the magic of the mathematics',\n            'and coding'];\n\n        const options = {\n            strings: stringsText,\n            typeSpeed: 80,\n            backSpeed: 10,\n            showCursor: true,\n            cursorChar: '',\n            loop: true\n        };\n\n        this.typed = new Typed('.typing-element', options);\n        this.typed.reset(true);\n    }\n\n}","<div class=\"heading\">\n    <h1>Fibonacci Spiral Matrix</h1>\n    <h3>\n        <div class=\"typing-container\">\n            <span class=\"typing-element\"></span>\n        </div>\n    </h3>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport {AbstractControl, FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  submitted = false;\n  form: FormGroup;\n\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private authService: AuthService,\n      private tokenStorage: TokenStorageService,\n      private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n      this.form = this.formBuilder.group(\n          {\n              username: [\n                  '',\n                  [\n                      Validators.required,\n                      Validators.minLength(6),\n                      Validators.maxLength(20)\n                  ]\n              ],\n              password: [\n                  '',\n                  [\n                      Validators.required,\n                      Validators.minLength(6),\n                      Validators.maxLength(40)\n                  ]\n              ]\n          }\n      );\n  }\n\n  get f(): { [key: string]: AbstractControl } {\n      return this.form.controls;\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n    this.authService.login(this.form.value.username, this.form.value.password).subscribe(\n        data => {\n            this.tokenStorage.saveToken(data.accessToken);\n            this.tokenStorage.saveUser(data);\n            this.isLoginFailed = false;\n            this.isLoggedIn = true;\n            this.roles = this.tokenStorage.getUser().roles;\n            this.reloadPage();\n        },\n        err => {\n          this.errorMessage = err.error.message;\n          this.isLoginFailed = true;\n        }\n    );\n  }\n\n  reloadPage(): void {\n    window.location.reload();\n  }\n\n}\n","<div class=\"col-md-12\" style=\"padding-top: 25px; display: flex; justify-content: center;\">\n    <div class=\"card card-container\" style=\"align-items: center; width: 30%\">\n        <img\n                id=\"profile-img\"\n                src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                class=\"profile-img-card\"\n                style=\"padding-top: 10px; border-radius: 50%; width: 55%\"\n        />\n\n        <form *ngIf=\"!isLoggedIn\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n                <label>Username</label>\n                <input\n                        type=\"text\"\n                        formControlName=\"username\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"/>\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                    <div *ngIf=\"f.username.errors.minlength\">\n                        Username must be at least 6 characters\n                    </div>\n                    <div *ngIf=\"f.username.errors.maxlength\">\n                        Username must not exceed 20 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label>Password</label>\n                <input\n                        type=\"password\"\n                        formControlName=\"password\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"/>\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    <div *ngIf=\"f.password.errors.minlength\">\n                        Password must be at least 6 characters\n                    </div>\n                    <div *ngIf=\"f.password.errors.maxlength\">\n                        Username must not exceed 40 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button class=\"btn btn-primary btn-block\">\n                    Login\n                </button>\n            </div>\n            <div class=\"form-group\">\n                <div\n                        class=\"alert alert-danger\"\n                        role=\"alert\"\n                        *ngIf=\"f.submitted && isLoginFailed\"\n                >\n                    Login failed: {{ errorMessage }}\n                </div>\n            </div>\n        </form>\n        <div class=\"alert alert-success\" style=\"margin-top: 20px;\" *ngIf=\"isLoggedIn\">\n            Logged in as {{ roles }}.\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport Validation from '../utils/validation';\nimport { AuthService } from '../_services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\n\nexport class RegisterComponent implements OnInit {\n  form: FormGroup;\n  submitted = false;\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private authService: AuthService,\n      private router: Router) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group(\n        {\n          username: [\n            '',\n            [\n              Validators.required,\n              Validators.minLength(6),\n              Validators.maxLength(20)\n            ]\n          ],\n          email: ['', [Validators.required, Validators.email]],\n          password: [\n            '',\n            [\n              Validators.required,\n              Validators.minLength(6),\n              Validators.maxLength(40)\n            ]\n          ],\n          confirmPassword: ['', Validators.required]\n        },\n        {\n          validators: [Validation.match('password', 'confirmPassword')]\n        }\n    );\n  }\n\n  get f(): { [key: string]: AbstractControl } {\n      return this.form.controls;\n  }\n\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  onSubmit(): void {\n    this.submitted = true;\n    this.authService.register(this.form.value.username, this.form.value.email, this.form.value.password).subscribe(\n        data => {\n          console.log(data);\n          this.isSuccessful = true;\n          this.isSignUpFailed = false;\n            setTimeout(() => {\n                this.router.navigate(['/login']);\n                }, 4000);\n        },\n        err => {\n            console.log(err.error.message)\n          this.errorMessage = err.error.message;\n          this.isSignUpFailed = true;\n        }\n    );\n  }\n\n  onReset(): void {\n    this.submitted = false;\n    this.form.reset();\n  }\n\n}\n","<div class=\"col-md-12\" style=\"padding-top: 25px; display: flex; justify-content: center;\">\n    <div class=\"card card-container\" style=\"align-items: center; width: 30%\">\n        <img\n                id=\"profile-img\"\n                src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                class=\"profile-img-card\"\n                style=\"padding-top: 10px; border-radius: 50%; width: 55%\"\n        />\n\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n                <label>Username</label>\n                <input\n                        type=\"text\"\n                        formControlName=\"username\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"/>\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                    <div *ngIf=\"f.username.errors.minlength\">\n                        Username must be at least 6 characters\n                    </div>\n                    <div *ngIf=\"f.username.errors.maxlength\">\n                        Username must not exceed 20 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label>Email</label>\n                <input\n                        type=\"text\"\n                        formControlName=\"email\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"/>\n                <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label>Password</label>\n                <input\n                        type=\"password\"\n                        formControlName=\"password\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"/>\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    <div *ngIf=\"f.password.errors.minlength\">\n                        Password must be at least 6 characters\n                    </div>\n                    <div *ngIf=\"f.password.errors.maxlength\">\n                        Username must not exceed 40 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label>Confirm Password</label>\n                <input\n                        type=\"password\"\n                        formControlName=\"confirmPassword\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\"/>\n                <div\n                        *ngIf=\"submitted && f.confirmPassword.errors\"\n                        class=\"invalid-feedback\"\n                >\n                    <div *ngIf=\"f.confirmPassword.errors.required\">\n                        Confirm Password is required\n                    </div>\n                    <div *ngIf=\"f.confirmPassword.errors.matching\">\n                        Confirm Password does not match\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n                <button\n                        type=\"button\"\n                        (click)=\"onReset()\"\n                        class=\"btn btn-warning float-right\"\n                >\n                    Reset\n                </button>\n            </div>\n            <div class=\"alert alert-warning\" *ngIf=\"isSignUpFailed\">\n                Signup failed!<br />{{ errorMessage }}\n            </div>\n            <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n                Your registration was successful!\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-rows',\r\n  templateUrl: './rows.component.html',\r\n  styleUrls: ['./rows.component.css']\r\n})\r\nexport class RowsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  @Input() rows: any[];\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<table class=\"table table-bordered\" style=\"border: 2px solid #6c757d5e\">\r\n  <tbody>\r\n  <tr *ngFor=\"let row of rows; let i = index\">\r\n    <td *ngFor=\"let item of row\" style=\"border:2px solid #6c757d5e;\">\r\n      {{ item }}\r\n    </td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n\r\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport default class Validation {\r\n\r\n    static match(controlName: string, checkControlName: string): ValidatorFn {\r\n        return (controls: AbstractControl) => {\r\n            const control = controls.get(controlName);\r\n            const checkControl = controls.get(checkControlName);\r\n            if (checkControl.errors && !checkControl.errors.matching) {\r\n                return null;\r\n            }\r\n            if (control.value !== checkControl.value) {\r\n                controls.get(checkControlName).setErrors({ matching: true });\r\n                return { matching: true };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}